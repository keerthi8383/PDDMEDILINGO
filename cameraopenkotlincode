package com.saveetha.medilingo

import android.Manifest
import android.app.Activity
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.net.Uri
import android.os.Bundle
import android.provider.MediaStore
import android.widget.ImageButton
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

class Cameraopen : AppCompatActivity() {

    private lateinit var captureButton: ImageButton
    private lateinit var galleryButton: ImageButton

    private val CAMERA_REQUEST_CODE = 100
    private val IMAGE_CAPTURE_CODE = 101
    private val GALLERY_PICK_CODE = 102

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_cameraopen)

        captureButton = findViewById(R.id.btn_capture)
        galleryButton = findViewById(R.id.btn_gallery)

        // Capture button click
        captureButton.setOnClickListener {
            checkCameraPermission()
        }

        // Gallery button click
        galleryButton.setOnClickListener {
            openGallery()
        }
    }

    // Check for camera permission
    private fun checkCameraPermission() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.CAMERA),
                CAMERA_REQUEST_CODE
            )
        } else {
            openCamera()
        }
    }

    // Handle permission result
    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<String>, grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == CAMERA_REQUEST_CODE) {
            if ((grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED)) {
                openCamera()
            } else {
                Toast.makeText(this, "Camera permission denied", Toast.LENGTH_SHORT).show()
            }
        }
    }

    // Open camera
    private fun openCamera() {
        val cameraIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        startActivityForResult(cameraIntent, IMAGE_CAPTURE_CODE)
    }

    // Open gallery
    private fun openGallery() {
        val galleryIntent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
        startActivityForResult(galleryIntent, GALLERY_PICK_CODE)
    }

    // Handle camera or gallery result
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (resultCode == Activity.RESULT_OK) {
            when (requestCode) {
                IMAGE_CAPTURE_CODE -> {
                    val imageBitmap = data?.extras?.get("data") as? Bitmap
                    if (imageBitmap != null) {
                        val intent = Intent(this, PhotoCapture::class.java)
                        intent.putExtra("captured_image", imageBitmap)
                        startActivity(intent)
                    }
                }

                GALLERY_PICK_CODE -> {
                    val imageUri: Uri? = data?.data
                    if (imageUri != null) {
                        val intent = Intent(this, PhotoCapture::class.java)
                        intent.putExtra("image_uri", imageUri.toString())
                        startActivity(intent)
                    }
                }
            }
        }
    }
}
